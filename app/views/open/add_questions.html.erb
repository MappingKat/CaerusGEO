<% content_for :userbar do %>
   <%= render :partial => "partials/open_breadcrumb", :locals => {:active => "add_questions", :classes => ["done", "done", "active", "pending","pending"]  } %>
<% end %>
<% content_for :current_page_class do %><%= @current_controller %>_<%= step.to_s %><% end %>

<div class="grid-content grid-survey grid-socialperception wizard">
	<div class="row" style="padding-bottom:20px;border:0px !important">
	    <%= render :partial => "partials/open_wizard_subheader", :locals => {:title => "Build your Survey Schema" }  %>

    <div class="span9" id="question_section">
        <ol class="questions"></ol>
        <a href="#" id="add_open">
          <i class="icon-plus-sign"></i>&nbsp;&nbsp;Add another question
        </a>
		</div>

		<div class="span3" id="tips">
			<p class="tip_title">Tips</p>
        <p>Specify the kind of data you are trying to record by labelling each field, then choose the appropriate field type. This will be available as a downloadable worksheet upon completion.</p>
        <p><span>'Text'</span> fields are for any kind of text</p>
        <p><span>'Number'</span> fields are for any fields that are number values only.</p>
        <p><span>'Date'</span> fields are for any fields that require a calendar day.</p>
        <p><span>'Date + Time'</span> fields are for any fields that require a particular moment in time. When Calendar day and hour/minute recording is relevant.</p>
		</div>
	</div>
</div>

<%= render :partial => "partials/survey_templates_for_questions", :locals => {:open => true} %>

<script>

    var ActiveQuestions = new QuestionCollection(<%= raw @survey.field_questions.to_json %>);

    $(document).ready(function() {

      var QuestionSection = Backbone.View.extend({

        el: "#question_section",

        tagName: "li",

        events: {
          'click #add_open' : 'add',
          'click .trash': 'destroy',
          'click .note_checkbox' : 'toggleNote',
          'mouseenter .move' :'moveenter',
          'mouseleave .move' :'moveleave',
          'change .type_selector' : 'changeType',
          'keyup textarea' : 'changeNote',
          'keyup .question_label' : 'changeLabel'
        },

        initialize: function() {
          this.collection.on("add remove", this.render,this);
          this.render();
          var self = this;
          //Init drag and drop sorting of questions.
          this.$el.find('ol').sortable({
            "stop": function(event,ui) {
              self.recreateIndexes();
            }
          });
          this.$el.find('ol').sortable('disable'); //we disable on it now that the stop callback is set.
          if (!this.collection.length) {
            this.add();
          }
        },

        add: function() {
          var newQuestion = new Question({'form':'fillin'});
          this.collection.add(newQuestion);
          return false;
        },

        destroy: function(e) {
          if (this.collection.length <= 1) {
            alert("You need at least one question.");
          }
          else {
            var cid = $(e.target).closest('.question_holder').attr('id');
            var thisQuestion = this.collection.get(cid);
            this.collection.remove(thisQuestion);
          }
          
          return false;
        },

        render: function() {
          var variables = { questions: this.collection.models };
          var template = _.template( $("#base_template").html(), variables );
          this.$el.find('ol').html( template ); 
          return this
        },

        moveenter: function(e) {
          this.$el.find('ol').sortable('enable');
        },

        moveleave: function(e) {
          this.$el.find('ol').sortable('disable');
        },

        toggleNote: function(e) {
          $(e.target).parent().parent().find('.note_holder').toggle();
        },

        recreateIndexes: function() {
          this.$el.find('.num').each(function(index,obj) { 
            $(obj).find('span').text((index+1));
          });
        },

        getQuestionAndValue:function(passedEvent) {
          var cid = $(passedEvent.target).closest('.question_holder').attr('id');
          var value = $(passedEvent.target).val();
          var thisQuestion = this.collection.get(cid);
          return {question:thisQuestion,value:value}
        },

        changeLabel: function(e) {
          var thisResult = this.getQuestionAndValue(e);
          thisResult.question.set('label', thisResult['value']);
        },

        changeType: function(e) {
          var thisResult = this.getQuestionAndValue(e);
          thisResult.question.set('form', thisResult['value']);
        },

        changeNote: function(e) {
          var thisResult = this.getQuestionAndValue(e);
          thisResult.question.set('note', thisResult['value']);
        }

      });

      var QuestionView = new QuestionSection({
        collection: ActiveQuestions
      });

      $("#next_wizard_button").click(function() {

        var notes = [];
        $("input.note_checkbox:checked").each(function(){notes.push($(this).parent().parent().find('textarea').val())})
        if (_.include(notes,"")){
          alert('Please enter a note for any question where you have specified one.');
          return false;
        }

        //Apply indexing now.
        $(".question_holder").each(function (index,obj) {
          var question = ActiveQuestions.get($(this).attr('id'));
          question.set({'index':index});
        });

        ActiveQuestions.each(function (question) {
          var domref = $("#"+question.cid);
          var has_note = (domref.find('.note_checkbox').attr('checked')=='checked');
          if (!has_note) {
            question.set('note',null);
          }
        });

        var labels = ActiveQuestions.pluck('label');

        if (_.uniq(labels).length !== labels.length) {
          alert("You must have a unique label for each question.");
          return false;
        }

        if (_.any(labels,function(label) { return (!label || label === '') })) {
          alert('You must enter a label for all questions.');
          return false;
        }

        var payload = {
          'questions' : ActiveQuestions.toJSON()
        }
        
        $.ajax({
            type: "PUT",
            url: '<%= url_for wizard_path %>',
            data: JSON.stringify(payload),
            contentType: 'application/json',
            error: function(response) {
              alert('Sorry, an error occured.')
            },
            success: function(data,status, xhr) {
              window.location = '<%= url_for next_wizard_path %>';
            }
        });
      });
    });
</script>
