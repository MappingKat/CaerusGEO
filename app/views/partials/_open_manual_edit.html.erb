<%= render :partial => "partials/survey_finished_questions", :locals => {:open => false} %>
<% content_for :current_page_class do %>report_edit_manual report_edit<% end %>
<% content_for :current_body_id do %>manual_edit_section<% end %>

<div class="row">
  <div class="span4">
    <p id="this_quantity" class="well"><%= pluralize(@report.spresults.count,"Entries") %> Created</p>
    <a class="btn" href="#" id="done_with_respondent_button">Save</a>
    <a class="btn" href="#" id="new_respondent_button"><i class="icon-plus"></i>New Entry</a>
    <ul id="questions"></ul>
  </div>

  <div class="span8">
    <p id="save_indicator">Saved.</p>
    <div id="entry_area">
  	 <div id="map"></div>
    </div>
  </div>
</div>


<script>

<% if @report.survey.types_used.include?('datetime') %>
window.tz_abbr = "<%= ActiveSupport::TimeZone.zones_map[@survey.time_zone].now.strftime('%Z') %>";
<% end %>
var questions = new QuestionCollection(<%= raw @report.survey.actual_questions.to_json %>);
var questionJSON = questions.toJSON();
var choice_hash = Open.GetLabelsForFields(questionJSON);
var form_hash = Open.GetFormsForFields(questionJSON);
var area = <%= raw @report.survey.area.bounds.to_json %>;
var grids = <%= raw @report.survey.area.grids.includes(:ne,:sw).to_json %>;
var full_count = <%= @report.spresults.count %>;
var map_form = "<%= @survey.map_form %>";

var Spresult = Backbone.Model.extend({});

var SpresultCollection = Backbone.Collection.extend({
  model: Spresult
});

var Spresults = new SpresultCollection();
Spresults.url = '<%= url_for survey_report_spresults_path(@report.survey,@report) %>';

var manualEditView = baseEditView.extend({

  el: "#manual_edit_section",

  events: {
    'click #save_finish_button' : 'leaveEdit',
    'click #done_with_respondent_button' : 'commitEntry',
    'click #new_respondent_button' : 'openNewForm'
  },

  initialize: function() {
    var self = this;

    this.map = this.initMap(null, true);
    this.handleQuestionSetup(questions, this.options.method, area, grids); // init questions
    var thismap = form_to_nameset[map_form];
    this.updateDrawTool(thismap);
    this.$el.find("#save_finish_button").attr('href',"<%= url_for survey_analyze_path(@report.survey) %>");
    
    var entityGroup = new L.LayerGroup()

    this.map.addLayer(entityGroup);
    this.existingEntityGroup = entityGroup;

    this.collection.fetch({
      success: function (collection, response, xhr) {
        if (collection.models.length) {
          var existing_group = self.handleExistingManualSet(map_form, choice_hash, form_hash);
        }
      },
      error: function (collection, response, options) {
        alert('Sorry, there was an error retrieving existing entries.');
      }
    });

    this._editInProgress = true;
    self._commitinProgress = false;

  },

  handleExistingManualSet: function (questionForm, choice_hash, form_hash) {
    var self = this;
    //Only called once.
    this.collection.each(function (entry) {
      Open.HandleUnifiedSet(entry, questionForm, choice_hash, form_hash, false, self.existingEntityGroup, {icon: window.green_icon}, sorted_path);
    });
  },

  openNewForm: function(e) {
    this._editInProgress = true;
    this.$el.find("#entry_area, #questions").fadeIn('fast');
    this.$el.find("#done_with_respondent_button").removeClass('disabled');
    this.$el.find("#save_indicator").hide();
    $(e.target).hide();
    return false
  },

  leaveEdit:  function(e) {
    var self = this;
    if (this.lastEntity) {
      this.showWarning(e, self.$el.find("#done_with_respondent_button"));
    }
    else {
      window.location = "<%= url_for survey_analyze_path(@report.survey) %>";
    }
    return false;
  },

  questionIsUnfinished: function(answer) {
    if (!answer) {
      return true
    }
    else {
      var test = false;
      switch (answer.form) {
        case "fillin":
          test = (answer.text == "")
          break;
        case "number": 
          test = (answer.number == "")
          break;
        case "date": 
          test = (answer.stamp == "")
          break;
        case "datetime":
          test = (answer.stamp == "")
          break;
      }
      return test
    }
  },

  collectManualAnswers: function () {
    var answerset = [];
    questions.each(function(question) {
      var form = question.get('form')
      var q_id = question.get('id');
      var jquery_obj = $("#"+q_id)
      var answer = null;
      if (form == 'fillin') {
        answer = {'text': jquery_obj.find('.answer').val()};
      }
      else if (form == 'number') {
        answer = {'number': jquery_obj.find('.answer').val()};
      }
      else if (_.include(['date','datetime'], form)) {
        answer = {'stamp': jquery_obj.find('.answer').val()}
      }
      else if (_.include(['geo_point','geo_polygon','geo_line'], form)) {
        var entity = question.get('entity');
        if (!entity) {
          answer = undefined;
        }
        else {
          answer = (form == 'geo_polygon' || form == 'geo_line') ? {'points': entity.getLatLngs()} : {'points': [entity.getLatLng()]};
        }
      }

      if (answer) {
        answer['form'] = form;
        answer['question_id'] = q_id;
      }
      answerset.push(answer);
    });
    return answerset
  },

  commitEntry: function(e) {
      var self = this;

      if (!self._editInProgress) {
        return false;
      }

      if (self._commitinProgress) {
        alert("A save in already in progress. Please wait.")
        return false;
      }
      
      var answers = this.collectManualAnswers();
      
      var notReady = _.any(answers,function (question){
        return self.questionIsUnfinished(question)
      });

      if (notReady) {
        alert("You must fill in all answers for this respondent.")
        return false;
      }

      self._commitinProgress = true;
      
      this.collection.create({'answers' : answers },
        {
          success: function(entry) {          
            //Replace with normal entity on map;
            self.map.removeLayer(self.lastEntity);
            Open.HandleUnifiedSet(entry, map_form, choice_hash, form_hash, false, self.existingEntityGroup, {icon: window.green_icon}, sorted_path, true); 

            self.$el.find("#this_quantity").text(self.collection.models.length + " Entries Created");
            //clean section

            self.$el.find('#questions input[type=text], #questions input[type=number]').val(''); //clear fillin questions.

            //end clean
            self.$el.find("#done_with_respondent_button").addClass('disabled');
            self.$el.find("#new_respondent_button").show(); //show new respondent button;
            
            self.$el.find(".leaflet-control-draw").fadeIn('fast'); //Bring back drawn controls
            self.$el.find("#entry_area,#questions").hide();
            self.$el.find("#save_indicator").fadeIn('fast');

            self.options.questions.findWhere({label:"Geo Response"}).set({entity:undefined});
            self.lastEntity = undefined;
            self._commitinProgress = false;
            self._editInProgress = false;
        },
        error:function(e) {
          alert('Encountered an error saving.');
          self._commitinProgress = false;
          self._editInProgress = false;
        }
      });

      return false
  }

});

$(document).ready(function() {
  var thisEditSection = new manualEditView({
      collection: Spresults,
      method: 'manual',
      model: Spresult,
      questions: questions
    });
});
</script>